function par_unwarp(subpar)
% function par_unwarp(subpar)
% runs unwarp using fsl's fugue tool

% fugue -i image_to_be_unwarped --loadfmap=fieldmap --unwarpdir= [x/y/z/x�/y�/z�] --dwell=1 -u warped_output

% Usage: 
% fugue -i <epi> -p <unwrapped phase map> -d <dwell-to-asym-ratio> -u <result> [options]
% fugue  -i <unwarped-image> -p <unwrapped phase map> -d <dwell-to-asym-ratio> -w <epi-like-result> [options]
% fugue -p <unwrapped phase map> -d <dwell-to-asym-ratio> --saveshift=<shiftmap> [options]

% image_to_be_warped:
%        Nifti file to be unwarped, such as an EPI. 
%        NOTE that this file should be in register with the field map
%        (which it is in our case as EPI_to_cal_synth_EPI is derived from the same
%        calibration data)
% fieldmap:
%       Nifti file containing the B0 field map
% unwarpdir:
%       Indicates the direction that the unwarp should be applied. This will usually correspond to your EPI readout direction, unless your EPI has been rotated. A negative sign following the x, y, or z indicates reversed readout.
% dwell: the CBI B0 field map is in units of echo spacing, so this parameter is set to 1 
% warped_output:
%       filename for the warped output
% 
% 
% subpar refers to either the subject number (in string notation) or 
% the par struct generated by par = par_params(subject)
% modified from old parscripts by jbh on 7/23/08


origdir = pwd;

% ---load par params if need be---

if isstruct(subpar) % if it is par_params struct
    par = subpar;
else % assume subject string
    par = par_params(subpar);
end

 %setenv FSLDIR /usr/local/fsl
 %setenv PATH ${FSLDIR}/bin:${PATH}
 setenv('FSLOUTPUTTYPE', 'NIFTI');
% % % source ${FSLDIR}/etc/fslconf/fsl.csh

cd(par.funcdir);
% run unwarp; generate mean img
fprintf('---Unwarp for %s---\n',par.substr);


for run = 1:par.numscans
    if par.data_seg == 1 %if its the experiment data
        if run<10
           filename = fullfile(par.funcdir,['scan0' int2str(run)], ['rscan0' int2str(run) '.nii']);
           scanpath = fullfile(par.funcdir,['scan0' int2str(run)]);
           outputnames = [sprintf( '\''') scanpath '/urscan0' int2str(run) sprintf( '\''') ];%outputfilename
        else
           filename = fullfile(par.funcdir,['scan' int2str(run)], ['rscan' int2str(run) '.nii']);
           scanpath = fullfile(par.funcdir,['scan' int2str(run)]);
           outputnames = [sprintf( '\''') scanpath '/urscan' int2str(run) sprintf( '\''') ];%outputfilename
        end
    elseif par.data_seg ==2 %if its the localizer data
         filename = fullfile(par.funcdir,'localizer/rlocalizer.nii');
           scanpath = fullfile(par.funcdir,'localizer');
           outputnames = [sprintf( '\''') scanpath '/urlocalizer' sprintf( '\''') ];%outputfilename
    end
  functional =[sprintf( '\''') filename sprintf( '\''')];  % these are the .nii file names for the 8 runs for subject 1
  fieldmap = [sprintf( '\''') par.calregbo sprintf( '\''')]; 

%if exist(fullfile(par.funcdir,['scan' num2str(run,'%02d')],['urscan' num2str(run,'%02d') '.nii']),'file')
%    fprintf('Unwarping already run for scan %s \n',run)
%else
% %Send all information to command linen to run fsl
  eval(['!/usr/local/fsl/bin/fugue -i ' functional  ' --loadfmap=' fieldmap ' --unwarpdir=y --dwell=1 -u ' outputnames ' --nocheck'])
%end


end

cd(origdir);
fprintf('---Unwarp COMPLETED for %s---\n',par.substr);